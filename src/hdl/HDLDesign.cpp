#include "HDLDesign.hpp"
#include "HDLCoreDevices.hpp"
#include "Util.hpp"
#include <algorithm>
#include <set>
using namespace std;

namespace ElasticC {
namespace HDLGen {

HDLDesign::HDLDesign(string _name) : name(_name) {
  gnd = new HDLSignal("ecc_gnd", new LogicSignalPortType());
  vcc = new HDLSignal("ecc_vcc", new LogicSignalPortType());
  AddSignal(gnd);
  AddSignal(vcc);
  AddDevice(new ConstantHDLDevice(0, gnd));
  AddDevice(new ConstantHDLDevice(1, vcc));
}

void HDLDesign::AddSignal(HDLSignal *sig) { signals.push_back(sig); }

HDLSignal *HDLDesign::CreateTempSignal(HDLPortType *type, string prefix) {
  static int inc = 0;
  HDLSignal *sig = new HDLSignal(prefix + "_ecc_" + to_string(inc++), type);
  AddSignal(sig);
  return sig;
}

void HDLDesign::AddDevice(HDLDevice *dev) { devices.push_back(dev); }

void HDLDesign::AddPort(HDLDevicePort *port) {
  if (port->connectedNet != nullptr)
    if (find(signals.begin(), signals.end(), port->connectedNet) ==
        signals.end())
      signals.push_back(port->connectedNet);
  ports.push_back(port);
}

void HDLDesign::AddPortFromSig(HDLSignal *sig, PortDirection dir) {
  AddPort(new HDLDevicePort(sig->name, nullptr, sig->sigType, sig, dir));
}

void HDLDesign::GenerateVHDLFile(ostream &out) {
  out << "--Generated by ElasticC version " << GetVersion() << endl << endl;
  set<string> deps;
  for (auto dev : devices) {
    auto ddeps = dev->GetVHDLDeps();
    deps.insert(ddeps.begin(), ddeps.end());
  }
  for (auto dep : deps) {
    string lib = dep.substr(0, dep.find('.'));
    out << "library " << lib << ";" << endl;
    out << "use " << dep << ";" << endl;
  }
  out << endl << endl;
  out << "entity " << name << " is " << endl;
  out << "\tport(" << endl;

  for (int i = 0; i < ports.size(); i++) {
    ports.at(i)->GenerateVHDL(out, (i == (ports.size() - 1)));
  }

  out << "\t);" << endl;
  out << "end " << name << ";" << endl << endl;

  out << "architecture hls_gen of " << name << " is" << endl;
  for (auto sig : signals) {
    if (find_if(ports.begin(), ports.end(), [this, sig](HDLDevicePort *p) {
          return (p->connectedNet == sig);
        }) == ports.end())
      sig->GenerateVHDL(out);
  }
  for (auto dev : devices)
    dev->GenerateVHDLPrefix(out);
  out << "begin" << endl;
  out << endl;
  for (auto dev : devices)
    dev->GenerateVHDL(out);
  out << "end hls_gen;" << endl;
};
} // namespace HDLGen
} // namespace ElasticC
